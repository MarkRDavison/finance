@inject IAuthenticationContext _authContext
@inject IStoreHelper _storeHelper
@inherits LayoutComponentBase

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<ActivityMonitor Loading="@_loading">
    <LoadingContent>
        <div class="entire-app-loading">
        </div>
    </LoadingContent>
    <ChildContent>
        <MudLayout>
            <MudAppBar>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <MudSpacer />
                <AppContext />
                <MudIconButton data-testid="@DataTestIds.QuickCreate" Icon="@Icons.Material.Filled.Add" Color="Color.Inherit" Edge="Edge.End" OnClick="@((e) => QuickAddToggle())" />
            </MudAppBar>
            <MudDrawer @bind-Open="@_drawerOpen" Anchor="@Anchor.Left">
                <NavigationMenu />
            </MudDrawer>
            <MudDrawer Class="mud-height-full" @bind-Open="@_quickAddOpen" Anchor="@Anchor.Right">
                <QuickAdd OnSelect="@(() => _quickAddOpen = false)" />
            </MudDrawer>
            <MudMainContent>
                <MudContainer>
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </ChildContent>
</ActivityMonitor>


@code {
    private bool _loading;
    private bool _drawerOpen = true;
    private bool _quickAddOpen = false;
    private bool _isDarkMode;
    private MudThemeProvider? _mudThemeProvider;
    
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    void QuickAddToggle()
    {
        _quickAddOpen = !_quickAddOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        await InvokeAsync(StateHasChanged);

        if (_authContext.IsAuthenticated)
        {
            await _storeHelper.DispatchAndWaitForResponse<FetchStartupAction, FetchStartupActionResponse>(new FetchStartupAction());
        }

        await base.OnInitializedAsync();

        _loading = !_authContext.IsAuthenticated;

        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider != null)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        await InvokeAsync(StateHasChanged);
    }
}

