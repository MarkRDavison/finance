@using mark.davison.finance.web.components.CommonCandidates.Components.CommandMenu
@attribute [Route(Routes.Account)]
@inherits ComponentWithState
@inject IStateHelper _stateHelper

<MudPaper>
    <MudStack Row="true" Style="padding: 10px;">
        <MudText Typo="Typo.h4">@_currentAccount?.Name</MudText>
        <MudTooltip Text="Add">
            <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Variant="Variant.Filled" Color="Color.Primary" Style="min-width: 60px;" />
        </MudTooltip>
    </MudStack>
    <MudDataGrid @ref="MudDataGrid" Items="@GenerateRows(Id)">
        <Columns>
            <TemplateColumn SortBy="_ => _.TransactionType" Title="">
                <CellTemplate>
                    @{
                        // TODO: Constant names
                        if (context.Item.TransactionType == "Deposit")
                        {
                            <MudIcon Icon="@Icons.Material.Filled.ArrowRightAlt" Title="Deposit" />
                        }
                        else if (context.Item.TransactionType == "Withdrawal")
                        {
                            <MudIcon Style="transform: scaleX(-1);" Icon="@Icons.Material.Filled.ArrowRightAlt" Title="Withdrawal" />
                        }
                        else if (context.Item.TransactionType == "Transfer")
                        {
                            <MudIcon Icon="@Icons.Material.Filled.SyncAlt" Title="Transfer" />
                        }
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Description" SortBy="_ => _.Description.Text">
                <CellTemplate>
                    @if (string.IsNullOrEmpty(context.Item.Description.Href) || context.Item.IsSubTransaction)
                    {
                        @context.Item.Description.Text
                    }
                    else
                    {
                        <MudLink Href="@context.Item.Description.Href">@context.Item.Description.Text</MudLink>
                    }
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="_ => _.Amount" Format="N2" CellStyleFunc="@_amountCellStyle" />
            <PropertyColumn Property="_ => _.Date" Format="MMMM d, yyyy" />
            <TemplateColumn Title="Source account" SortBy="_ => _.SourceAccount.Text">
                <CellTemplate>
                    @if (string.IsNullOrEmpty(context.Item.SourceAccount.Href))
                    {
                        @context.Item.SourceAccount.Text
                    }
                    else
                    {
                        <MudLink Href="@context.Item.SourceAccount.Href">@context.Item.SourceAccount.Text</MudLink>
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Destination account" SortBy="@(_ => _.DestinationAccount.Text)">
                <CellTemplate>
                    @if (string.IsNullOrEmpty(context.Item.DestinationAccount.Href))
                    {
                        @context.Item.DestinationAccount.Text
                    }
                    else
                    {
                        <MudLink Href="@context.Item.DestinationAccount.Href">@context.Item.DestinationAccount.Text</MudLink>
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Category" SortBy="@(_ => _.Category.Text)">
                <CellTemplate>
                    @if (string.IsNullOrEmpty(context.Item.Category.Href))
                    {
                        @context.Item.Category.Text
                    }
                    else
                    {
                        <MudLink Href="@context.Item.Category.Href">@context.Item.Category.Text</MudLink>
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Sortable="false">
                <CellTemplate>
                    @if (!context.Item.IsSubTransaction)
                    {
                        <CommandMenu Items="@commandMenuItems" />
                    }
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudPaper>

@* <div class="container">
    <h1 style="display: inline-block;">@_currentAccount?.Name</h1>
    <Button 
        CssClass="float-end" 
        Label="Edit"
        Variant="ButtonVariant.Outlined"
        Type="ButtonType.Primary"
        OnClick="@OpenEditAccountModal" />
    <div class="container">
        <table class="z-table" style="width: 100%;">
            <thead>
                <tr>
                    <th style="text-align: right;">Description</th>
                    <th style="text-align: right;">Amount</th>
                    <th style="text-align: right;">Date</th>
                    <th style="text-align: right;">Source account</th>
                    <th style="text-align: right;">Destination account </th>
                    <th style="text-align: right;">Category</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Generate(Id))
                {
                    @if (item.IsSplit)
                    {
                        <tr>
                            <td style="text-align: right;">@item.SplitDescription</td>
                            <td style="text-align: right;"></td>
                            <td style="text-align: right;"></td>
                            <td style="text-align: right;"></td>
                            <td style="text-align: right;"></td>
                            <td style="text-align: right;"></td>
                        </tr>
                    }
                    @foreach (var splitItem in item.Transactions)
                    {
                        var sourceAccount = _accountListState.Instance.Accounts.First(_ => _.Id == splitItem.SourceTransaction.AccountId);
                        var destinationAccount = _accountListState.Instance.Accounts.First(_ => _.Id == splitItem.DestinationTransaction.AccountId);

                        var amount = (sourceAccount.Id == Id ? splitItem.SourceTransaction.Amount : splitItem.DestinationTransaction.Amount);

                        var currency = _lookupState.Instance.Currencies.First(_ => _.Id == sourceAccount.CurrencyId);

                        var decimalAmount = CurrencyRules.FromPersisted(amount);
                        var formattedAmount = $"{(decimalAmount < 0 ? "-" : string.Empty)}{currency?.Symbol}{Math.Abs(decimalAmount).ToString($"N{currency!.DecimalPlaces}")}";

                        var category = _categoryListState.Instance.Categories.FirstOrDefault(_ => _.Id == splitItem.SourceTransaction.CategoryId);

                        <tr>
                            <td style="text-align: right;">@splitItem.SourceTransaction.Description</td>
                            <td style="text-align: right;">@formattedAmount</td>
                            <td style="text-align: right;">@splitItem.SourceTransaction.Date.ToShortDateString()</td>
                            <td style="text-align: right;">@sourceAccount.Name</td>
                            <td style="text-align: right;">@destinationAccount.Name</td>
                            <td style="text-align: right;">@category?.Name</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>
<EditAccountModal @bind-IsOpen="EditAccountModalOpen" ViewModel="@_editViewModel" Title="Edit account" /> *@