@inherits LayoutComponentBase

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <AppContext />
        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Inherit" Edge="Edge.End" OnClick="@((e) => QuickAddToggle())" />
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" Anchor="@Anchor.Left">
        <MyNavMenu /> @*TODO: Rename*@
    </MudDrawer>
    <MudDrawer Class="mud-height-full" @bind-Open="@_quickAddOpen" Anchor="@Anchor.Right">
        <QuickAdd OnSelect="@(() => _quickAddOpen = false)" />
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            <AppBody>
                @Body
            </AppBody>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    bool _quickAddOpen = false;
    private bool _isDarkMode;
    private MudThemeProvider? _mudThemeProvider;
    
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    void QuickAddToggle()
    {
        _quickAddOpen = !_quickAddOpen;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider != null)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        await InvokeAsync(StateHasChanged);
    }
}

