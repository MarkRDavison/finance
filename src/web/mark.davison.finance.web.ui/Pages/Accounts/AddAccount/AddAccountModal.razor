@inject IServiceProvider _serviceProvider;

<Modal
    Title="Add Account"
    CloseOnOutsideClick="false"
    @bind-IsOpen="IsOpen">
    <ModalContent>
        <AddAccountForm ViewModel="@ViewModel.AddAccountFormViewModel" />
    </ModalContent>
    <ModalFooter>
        <Button
            Disabled="@_inProgress"
            Label="Cancel" 
            Variant="ButtonVariant.Outlined"
            Type="ButtonType.Danger" 
            OnClick="@OnCancel"/>
        <Button
            Disabled="@_saveDisabled"
            Progress="@_inProgress"
            Label="Save" 
            Variant="ButtonVariant.Outlined"
            Type="ButtonType.Success" 
            OnClick="@HandleSave" />
    </ModalFooter>
</Modal>

@code {
    private bool _saveDisabled => _inProgress;
    private bool _inProgress;

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    public AddAccountViewModel ViewModel { get; set; } = default!;

    protected override void OnInitialized()
    {
        Reset();
    }

    protected void Reset()
    {
        ViewModel = _serviceProvider.GetRequiredService<AddAccountViewModel>();
    }

    public async Task HandleSave()
    {
        _inProgress = true;
        StateHasChanged();

        var success = await ViewModel.OnSave();

        _inProgress = false;
        if (success)
        {
            IsOpen = false;
        }
        StateHasChanged();
        Reset();
    }

    private async Task OnCancel()
    {
        await ViewModel.OnCancel();
        IsOpen = false;
        Reset();
    }

}
