@attribute [Route(Routes.TransactionNew)]
@inherits ComponentWithState
@inject AddTransactionPageViewModel _viewModel
@inject IStateHelper _stateHelper

<div class="container clearfix" style="padding: 10px;">

@{
    int i = 1;
}

    <h1>Create new @_transactionType</h1>

@foreach (var transactionViewModel in _viewModel.AddTransactionFormViewModels)
{
    <div class="add-transaction-split-container container" style="padding: 12px; border-top: solid 5px LightGray">
        <div class="container">
        @if (_viewModel.AddTransactionFormViewModels.Count == 1)
        {
            <h3 style="display: inline-block;">Transaction info</h3>
        }
        else {
            <h3 style="display: inline-block;">Split @i / @_viewModel.AddTransactionFormViewModels.Count</h3>

            <Button 
                CssClass="float-end"
                Label="Remove"
                Variant="ButtonVariant.Text"
                Type="ButtonType.Danger"
                OnClick="@(() => _viewModel.RemoveSplitTransaction(transactionViewModel))" />
        }
        </div>
        <AddTransactionForm
            ViewModel="@transactionViewModel"
            Id="@($"AddTransactionForm_{i - 1}")"
            TransactionType="@Type"
            LookupState="@_lookupState.Instance"
            AccountListState="@_accountListState.Instance" />
    </div>
    i++;
}

@if (_viewModel.AddTransactionFormViewModels.Count > 1)
{
    <div class="container" style="padding: 12px; border-top: solid 5px LightGray">
        <TextInput 
            Width="100%"
            Id="SplitTransactionDescription"
            IsLabelDisplay="true"
            Label="Split transaction description"
            @bind-Value="@_viewModel.SplitTransactionDescription" />
    </div>
}

    <div class="container">
        <Button 
            Disabled="@_submitting"
            Label="Add split transaction"
            Variant="ButtonVariant.Text"
            Type="ButtonType.Primary"
            OnClick="@_viewModel.AddSplitTransaction" />
        <Button 
            Disabled="@_submitting"
            Progress="@_submitting"
            CssClass="float-end"
            Label="Submit"
            Variant="ButtonVariant.Text"
            Type="ButtonType.Success"
            OnClick="@OnSubmit" />
    </div>
</div>

@code {
    private bool _submitting;
    private IStateInstance<LookupState> _lookupState = default!;
    private IStateInstance<AccountListState> _accountListState = default!;

    private string _transactionType => _lookupState.Instance.TransactionTypes.FirstOrDefault(_ => _.Id == Type)?.Type ?? "Transaction";

    [Parameter]
    public Guid Type { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _lookupState = GetState<LookupState>();
        _accountListState = GetState<AccountListState>();
        await EnsureStateLoaded();
    }

    protected override async Task OnParametersSetAsync()
    {
        _viewModel.TransactionTypeId = Type;
        await EnsureStateLoaded();
    }

    private async Task OnSubmit()
    {
        _submitting = true;
        await _viewModel.Submit();
        _submitting = false;
    }

    protected async Task EnsureStateLoaded()
    {
        await _stateHelper.FetchAccountList(false);
    }
}