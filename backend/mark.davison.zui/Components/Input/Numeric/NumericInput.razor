@using System.Text.Json
@inherits BaseInput<decimal>

<div class="z-col" style="width: @Width;">
    @if (IsLabelDisplay)
    {
        <label htmlFor="@Id" class="z-form-label">@Label</label>
    }
    <input
        class="z-form-control z-numeric-input hide-spinner"
        id="@Id"
        width="@Width"
        autocomplete="off"
        type="text"
        readonly="@IsReadOnly"
        disabled="@Disabled"
        onclick="this.select();"
        @bind-value="@StringValue"
        @onkeydown="@OnKeydown"
        @onkeydown:preventDefault="@preventKey"
        @oninput="@(ui => OnInput(ui))"
        onfocus="@(() => OnFocus())"
        onblur="@(() => OnBlur())" />
</div>

@code {
    private bool _touched;
    private bool preventKey { get; set; }

    private void OnKeydown(KeyboardEventArgs args)
    {
        preventKey = false;

        if (args.Key.Length == 1 && args.CtrlKey)
        {
            return;
        }

        if (args.Key.Length != 1)
        {
            return;
        }

        if (!UpdateValue(StringValue + args.Key))
        {
            preventKey = true;
            return;
        }
    }


    public string StringValue { get; set; } = string.Empty;

    private bool UpdateValue(string value)
    {
        var hyphenIndexFirst = value.IndexOf('-');
        var hyphenIndexSecondary = value.Length > 1 ? value.IndexOf('-', 1) : -1;

        if (!Negative && hyphenIndexFirst != -1) {
            return false;
        }

        if (hyphenIndexSecondary != -1) {
            return false;
        }
        var plusIndex = value.IndexOf('+', 1);

        if (plusIndex != -1) {
            return false;
        }

        var decimalIndexFirst = value.IndexOf('.');

        if (DecimalPlaces <= 0 && decimalIndexFirst != -1) {
            return false;
        }
        var decimalIndexSecondary =
          decimalIndexFirst == -1 ? -1 : value.IndexOf('.', decimalIndexFirst + 1);

        if (decimalIndexSecondary != -1) {
            return false;
        }

        for (var i = 0; i < value.Length; i++) {
            var c = value[i];
            if ((c < '0' || c > '9') && c != '.' && c != '-' && c != '+') {
                return false;
            }
        }

        if (
          decimalIndexFirst != -1 &&
          value.Length - decimalIndexFirst - 1 > DecimalPlaces
        ) {
            return false;
        }

        if (decimal.TryParse(value, out var numeric))
        {
            if (Max != null && numeric > Max)
            {
                return false;
            }

            if (Min != null && numeric < Min)
            {
                return false;
            }

            _touched = true;
            return true;
        }

        if (value == "-")
        {
            _touched = true;
            return true;
        }

        return false;
    }

    private void OnInput(ChangeEventArgs e)
    {
        var newValue = e.Value as string;
        if (newValue != null)
        {
            StringValue = newValue;
        }
    }

    private void OnFocus()
    {
        if (_touched)
        {
            StringValue = Value.ToString();
        }
    }

    private async Task OnBlur()
    {
        if (!string.IsNullOrEmpty(StringValue)) {
            Value = decimal.Parse(StringValue);
            await ValueChanged.InvokeAsync(Value);
            if (Formatter != null)
            {
                StringValue = Formatter(Value);
            }
        }
    }

    [Parameter]
    public bool Negative { get; set; } = true;

    [Parameter]
    public int DecimalPlaces { get; set; } = 2;

    [Parameter]
    public int? Min { get; set; }

    [Parameter]
    public int? Max { get; set; }

    [Parameter]
    public Func<decimal, string>? Formatter { get; set; }

}
