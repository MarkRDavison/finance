@typeparam TKey
@typeparam TRow where TRow : class, ITableRow<TKey>

<tbody>
    
    @foreach (var row in PagedRows)
    {
        var type = typeof(TRow);

        <tr class="z-table-row" key="@row.Id">
            @foreach (var col in ColumnDefinitions)
            {
                var propInfo = type.GetProperty(col.Field);
                var style = $"text-align: {col.Align.ToString().ToLowerInvariant()};";

                <td style="@style" key="@row.Id-@col.Field">@propInfo!.GetValue(row)</td>
            }
        </tr>
    }
</tbody>

@code {
    public IEnumerable<TRow> PagedRows
    {
        get
        {
            if (PagingEnabled)
            {
                var rows= Rows.Skip(PageIndex * PageSize).Take(PageSize).ToList();
                if (rows.Count < PageSize)
                {
                    // TODO: Add placeholder rows so grid size is constant
                    return rows;
                }
                return rows;
            }
            return Rows;
        }
    }

    [Parameter, EditorRequired]
    public IEnumerable<TableColumDefinition<TRow>> ColumnDefinitions { get; set; } = Enumerable.Empty<TableColumDefinition<TRow>>();
        
    [Parameter, EditorRequired]
    public IEnumerable<TRow> Rows { get; set; } = Enumerable.Empty<TRow>();
    
    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public int PageIndex { get; set; }

    [Parameter]
    public bool PagingEnabled { get; set; }

}
